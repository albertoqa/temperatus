package temperatus.model.pojo;

import javafx.beans.binding.StringBinding;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;
import temperatus.util.DateUtils;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Subject generated by hbm2java
 */
@Entity
@Table(name = "SUBJECT", schema = "PUBLIC", catalog = "DATABASE", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
public class Subject implements java.io.Serializable {

    private Integer id;
    private boolean isPerson;
    private SimpleStringProperty name = new SimpleStringProperty();
    private Boolean sex;
    private Date age;
    private SimpleDoubleProperty weight = new SimpleDoubleProperty();
    private SimpleDoubleProperty height = new SimpleDoubleProperty();
    private String observations;
    private Set<Mission> missions = new HashSet<Mission>(0);

    public Subject() {
    }

    public Subject(boolean isPerson, String name) {
        this.isPerson = isPerson;
        this.name.setValue(name);
    }

    public Subject(boolean isPerson, String name, Boolean sex, Date age, Double weight, Double height,
                   String observations, Set<Mission> missions) {
        this.isPerson = isPerson;
        this.name.setValue(name);
        this.sex = sex;
        this.age = age;
        this.weight.setValue(weight);
        this.height.setValue(height);
        this.observations = observations;
        this.missions = missions;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "IS_PERSON", nullable = false)
    public boolean isIsPerson() {
        return this.isPerson;
    }

    public void setIsPerson(boolean isPerson) {
        this.isPerson = isPerson;
    }

    @Column(name = "NAME", unique = true, nullable = false, length = 300)
    public String getName() {
        return this.name.getValue();
    }

    public void setName(String name) {
        this.name.setValue(name);
    }

    @Column(name = "SEX")
    public Boolean getSex() {
        return this.sex;
    }

    public void setSex(Boolean sex) {
        this.sex = sex;
    }

    @Column(name = "AGE")
    @Temporal(TemporalType.DATE)
    public Date getAge() {
        return this.age;
    }

    public void setAge(Date dateIni) {
        this.age = dateIni;
    }

    @Column(name = "WEIGHT", precision = 17, scale = 0)
    public Double getWeight() {
        return this.weight.getValue();
    }

    public void setWeight(Double weight) {
        this.weight.setValue(weight);
    }

    @Column(name = "HEIGHT", precision = 17, scale = 0)
    public Double getHeight() {
        return this.height.getValue();
    }

    public void setHeight(Double height) {
        this.height.setValue(height);
    }

    @Column(name = "OBSERVATIONS")
    public String getObservations() {
        return this.observations;
    }

    public void setObservations(String observations) {
        this.observations = observations;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "subject", cascade = CascadeType.ALL)
    public Set<Mission> getMissions() {
        return this.missions;
    }

    public void setMissions(Set<Mission> missions) {
        this.missions = missions;
    }

    @Override
    public String toString() {
        return name.getValue();
    }

    @Transient
    public SimpleStringProperty getType() {
        if (this.isIsPerson()) {
            return new SimpleStringProperty("Person");
        } else {
            return new SimpleStringProperty("Object");
        }
    }

    @Transient
    public SimpleStringProperty getNameProperty() {
        return name;
    }

    @Transient
    public SimpleStringProperty getAgeProperty() {
        if (this.isIsPerson()) {
            if (age != null) {
                LocalDate date = DateUtils.asLocalDate(age);
                int years = LocalDate.now().getYear() - date.getYear();
                return new SimpleStringProperty(String.valueOf(years));
            }
        }
        return new SimpleStringProperty("");
    }

    @Transient
    public SimpleStringProperty getSexProperty() {
        if (getSex() != null) {
            if (getSex()) {
                return new SimpleStringProperty("Male");
            } else {
                return new SimpleStringProperty("Female");
            }
        } else {
            return new SimpleStringProperty("");
        }
    }

    @Transient
    public StringBinding getHeightProperty() {
        return height.asString();
    }

    @Transient
    public StringBinding getWeightProperty() {
        return weight.asString();
    }

}
