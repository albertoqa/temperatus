package temperatus.model.pojo;

import javafx.beans.property.SimpleStringProperty;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Author generated by hbm2java
 */
@Entity
@Table(name = "AUTHOR", schema = "PUBLIC", catalog = "DATABASE", uniqueConstraints = @UniqueConstraint(columnNames = "NAME"))
public class Author implements java.io.Serializable {

    private Integer id;
    private SimpleStringProperty name = new SimpleStringProperty();
    private Set<Mission> missions = new HashSet<Mission>(0);

    public Author() {
    }

    public Author(String name) {
        this.name.setValue(name);
    }

    public Author(String name, Set<Mission> missions) {
        this.name.setValue(name);
        this.missions = missions;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "NAME", unique = true, nullable = false)
    public String getName() {
        return this.name.getValue();
    }

    public void setName(String name) {
        this.name.setValue(name);
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "author", cascade = CascadeType.ALL)
    public Set<Mission> getMissions() {
        return this.missions;
    }

    public void setMissions(Set<Mission> missions) {
        this.missions = missions;
    }

    @Override
    public String toString() {
        return name.getValue();
    }

    @Transient
    public SimpleStringProperty getNameProperty() {
        return name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Author)) return false;

        Author author = (Author) o;

        return getName() != null ? getName().equals(author.getName()) : author.getName() == null;

    }

    @Override
    public int hashCode() {
        return getName() != null ? getName().hashCode() : 0;
    }
}
